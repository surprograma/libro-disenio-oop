"use strict";(self.webpackChunklibro_disenio_oop=self.webpackChunklibro_disenio_oop||[]).push([[3522],{3905:function(e,a,n){n.d(a,{Zo:function(){return c},kt:function(){return p}});var o=n(7294);function i(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function s(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);a&&(o=o.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,o)}return n}function t(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?s(Object(n),!0).forEach((function(a){i(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function r(e,a){if(null==e)return{};var n,o,i=function(e,a){if(null==e)return{};var n,o,i={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],a.indexOf(n)>=0||(i[n]=e[n]);return i}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=o.createContext({}),d=function(e){var a=o.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):t(t({},a),e)),n},c=function(e){var a=d(e.components);return o.createElement(l.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return o.createElement(o.Fragment,{},a)}},m=o.forwardRef((function(e,a){var n=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),m=d(n),p=i,b=m["".concat(l,".").concat(p)]||m[p]||u[p]||s;return n?o.createElement(b,t(t({ref:a},c),{},{components:n})):o.createElement(b,t({ref:a},c))}));function p(e,a){var n=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var s=n.length,t=new Array(s);t[0]=m;var r={};for(var l in a)hasOwnProperty.call(a,l)&&(r[l]=a[l]);r.originalType=e,r.mdxType="string"==typeof e?e:i,t[1]=r;for(var d=2;d<s;d++)t[d]=n[d];return o.createElement.apply(null,t)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5845:function(e,a,n){n.r(a),n.d(a,{frontMatter:function(){return r},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return c},default:function(){return m}});var o=n(7462),i=n(3366),s=(n(7294),n(3905)),t=["components"],r={sidebar_position:2,title:"Cualidades independientes de la tecnolog\xeda",description:"Una breve descripci\xf3n de algunas de las cualidades de dise\xf1o m\xe1s populares: acoplamiento, cohesi\xf3n, robustez y varias m\xe1s."},l=void 0,d={unversionedId:"cualidades-disenio/cualidades-independientes-tecnologia",id:"cualidades-disenio/cualidades-independientes-tecnologia",isDocsHomePage:!1,title:"Cualidades independientes de la tecnolog\xeda",description:"Una breve descripci\xf3n de algunas de las cualidades de dise\xf1o m\xe1s populares: acoplamiento, cohesi\xf3n, robustez y varias m\xe1s.",source:"@site/docs/cualidades-disenio/cualidades-independientes-tecnologia.md",sourceDirName:"cualidades-disenio",slug:"/cualidades-disenio/cualidades-independientes-tecnologia",permalink:"/libro-disenio-oop/docs/cualidades-disenio/cualidades-independientes-tecnologia",editUrl:"https://github.com/surprograma/libro-disenio-oop/edit/main/docs/cualidades-disenio/cualidades-independientes-tecnologia.md",tags:[],version:"current",lastUpdatedBy:"Federico Aloi",lastUpdatedAt:1629760673,formattedLastUpdatedAt:"8/23/2021",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Cualidades independientes de la tecnolog\xeda",description:"Una breve descripci\xf3n de algunas de las cualidades de dise\xf1o m\xe1s populares: acoplamiento, cohesi\xf3n, robustez y varias m\xe1s."},sidebar:"tutorialSidebar",previous:{title:"Introducci\xf3n a las cualidades de dise\xf1o",permalink:"/libro-disenio-oop/docs/cualidades-disenio/introduccion"},next:{title:"Introducci\xf3n a los patrones de dise\xf1o",permalink:"/libro-disenio-oop/docs/patrones-disenio/introduccion"}},c=[{value:"Simplicidad",id:"simplicidad",children:[]},{value:"Robustez",id:"robustez",children:[]},{value:"Flexibilidad",id:"flexibilidad",children:[]},{value:"Acoplamiento",id:"acoplamiento",children:[]},{value:"Cohesi\xf3n",id:"cohesi\xf3n",children:[]},{value:"Facilidad de prueba (o <em>testeabilidad</em>)",id:"facilidad-de-prueba-o-testeabilidad",children:[]},{value:"Abstracci\xf3n",id:"abstracci\xf3n",children:[]},{value:"Consistencia",id:"consistencia",children:[]},{value:"Redundancia m\xednima",id:"redundancia-m\xednima",children:[]},{value:"Mutaciones controladas",id:"mutaciones-controladas",children:[]}],u={toc:c};function m(e){var a=e.components,n=(0,i.Z)(e,t);return(0,s.kt)("wrapper",(0,o.Z)({},u,n,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Este art\xedculo es una adaptaci\xf3n de ",(0,s.kt)("a",{parentName:"p",href:"https://docs.google.com/document/d/14HdvHvS33WqYb6Ak0BGa0IeCTbzeCRSDKs-1Ot-qLDw/edit"},"Cualidades de dise\xf1o"),", elaborado por Nicol\xe1s Passerini, Carlos Lombardi, Fernando Dodino, Leonardo Gassman, Rodrigo Merino, Juan Zaffaroni, Franco Bulgarelli y Federico Aloi.")),(0,s.kt)("p",null,"Las cualidades que describimos a continuaci\xf3n son, hasta cierto punto, independientes de la tecnolog\xeda que utilicemos en nuestro desarrollo."),(0,s.kt)("p",null,"La tecnolog\xeda, y en particular el lenguaje de programaci\xf3n que utilicemos, ser\xe1 un factor limitante en cu\xe1nto a cu\xe1les dise\xf1os podemos hacer y cu\xe1les no, pero a\xfan as\xed siempre podremos analizarlo en t\xe9rminos de estas cualidades."),(0,s.kt)("h2",{id:"simplicidad"},"Simplicidad"),(0,s.kt)("p",null,"Dado que la idea de simplicidad es muy amplia, vamos a tomar la interpretaci\xf3n de KISS (",(0,s.kt)("em",{parentName:"p"},"Keep it simple, stupid"),") y YAGNI (",(0,s.kt)("em",{parentName:"p"},"You aren\u2019t gonna need it"),"): no sobredise\xf1ar, focaliz\xe1ndonos en las necesidades conocidas del sistema."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"KISS:")," muchas veces hay abstracciones que no son fundamentales, no surgen del negocio o su presencia no aporta a la soluci\xf3n. Lo que nos propone KISS es que cualquier complejidad innecesaria deber\xeda ser evitada."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"YAGNI:")," los requerimientos de hoy rara vez van a coincidir con los de ma\xf1ana. Lo que nos propone YAGNI es no agregar funcionalidad nueva que no apunte a la problem\xe1tica actual, es decir, no dise\xf1ar pensando en requerimientos en futuros hipot\xe9ticos, sino focalizarnos en las necesidades conocidas."),(0,s.kt)("p",null,"Esto es importante por dos motivos:"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Por un factor econ\xf3mico:"),' agregar funcionalidad no requerida por el momento, nos saca tiempo para hacer otras que s\xed lo son. Podr\xeda pasar incluso que esa funcionalidad "extra" nunca sea requerida o que est\xe9 basada en conceptos err\xf3neos.'),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Por complejidad:")," incorporar al modelo actual un requerimiento no solicitado, inyecta complejidad al mismo en la ventana de tiempo entre que se introdujo esa complejidad, y cuando realmente se precis\xf3."),(0,s.kt)("p",null,"En definitiva, a medida que tengamos que mantener en nuestra mente m\xe1s abstracciones para poder entender y predecir el comportamiento de un sistema, estamos ante dise\xf1os m\xe1s complejos. La mayor\xeda de los sistemas funcionan mejor cuanto m\xe1s simples son. Podemos decir que la ",(0,s.kt)("em",{parentName:"p"},"Complejidad Accidental")," que proviene de nuestra propia soluci\xf3n (dise\xf1o) se debe evitar. La ",(0,s.kt)("em",{parentName:"p"},"Complejidad Esencial")," propia del problema a solucionar, se debe manejar en nuestra soluci\xf3n de la forma m\xe1s simple posible."),(0,s.kt)("h2",{id:"robustez"},"Robustez"),(0,s.kt)("p",null,"La robustez nos dice que ante un uso inadecuado por parte del usuario, sistemas externos o ante fallas internas:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"El sistema no debe generar informaci\xf3n o comportamiento inconsistente/err\xe1tico."),(0,s.kt)("li",{parentName:"ul"},"El sistema debe reportar los errores y volver a un estado consistente."),(0,s.kt)("li",{parentName:"ul"},"El sistema debe facilitar tanto como sea posible la detecci\xf3n de la causa del problema.")),(0,s.kt)("p",null,'Es decir, la robustez no se trata de evitar que un sistema falle (lo cual es pr\xe1cticamente inevitable), sino de establecer mecanismos para lidiar de forma "agraciada" con las situaci\xf3n excepcionales.'),(0,s.kt)("p",null,"Un principio que nos ayudar\xe1 a mejorar esta cualidad en nuestras soluciones ser\xe1 el de ",(0,s.kt)("em",{parentName:"p"},"Fail Fast")," (fallar r\xe1pido). Este nos propone que ante el indicio de un comportamiento incorrecto, el sistema debe abortar de forma ordenada la ejecuci\xf3n de su operatoria y reportar el error. Seguir este principio minimizar\xe1 las probabilidades de generar inconsistencias y facilitar\xe1 encontrar la causa del problema (dado que el error se reportar\xe1 pr\xf3ximo al momento y lugar en donde ocurri\xf3)."),(0,s.kt)("p",null,"Esto contrasta con otra interpretaci\xf3n de robustez: \u201ccu\xe1nta tranquilidad le da al usuario el uso de la aplicaci\xf3n\u201d. Esto evidentemente no nos sirve para comparar el dise\xf1o sino el producto final, dado que en esa sensaci\xf3n hay factores externos al mismo: calidad de la implementaci\xf3n, defectos en las tecnolog\xedas empleadas, el tiempo que se ha invertido en probar el sistema, y los propios prejuicios del usuario. Por tanto, esta interpretaci\xf3n no nos ser\xe1 de gran utilidad al dise\xf1ar."),(0,s.kt)("h2",{id:"flexibilidad"},"Flexibilidad"),(0,s.kt)("p",null,"Capacidad de reflejar cambios en el dominio de manera simple y sencilla. Podemos verlo en dos ejes: extensibilidad (capacidad de agregar nuevas caracter\xedsticas con poco impacto) y mantenibilidad (capacidad de modificar las caracter\xedsticas existentes con el menor esfuerzo posible)."),(0,s.kt)("h2",{id:"acoplamiento"},"Acoplamiento"),(0,s.kt)("p",null,"El acoplamiento es el grado de dependencia entre dos m\xf3dulos/componentes, es decir, es el nivel de conocimiento que un m\xf3dulo tiene sobre otro. Pensemos que cuanto mayor sea el acoplamiento, los cambios o errores de un m\xf3dulo repercutir\xe1n en mayor medida sobre el otro m\xf3dulo."),(0,s.kt)("p",null,"Buscaremos minimizar el acoplamiento para:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Mejorar la mantenibilidad"),(0,s.kt)("li",{parentName:"ul"},"Aumentar la reutilizaci\xf3n"),(0,s.kt)("li",{parentName:"ul"},"Evitar que un defecto en un m\xf3dulo se propague a otros, haciendo dificultoso detectar d\xf3nde est\xe1 el problema."),(0,s.kt)("li",{parentName:"ul"},"Minimizar el riesgo de tener que tocar m\xfaltiples componentes ante una modificaci\xf3n, cuando solo se deber\xeda modificar uno.")),(0,s.kt)("h2",{id:"cohesi\xf3n"},"Cohesi\xf3n"),(0,s.kt)("p",null,"Un m\xf3dulo o componente cohesivo tiende a tener todos sus elementos abocados a resolver el mismo problema. Puesto en otras palabras, la cohesi\xf3n se trata de cu\xe1ntas responsabilidades tiene el componente: cuantas m\xe1s sean, menos cohesivo ser\xe1."),(0,s.kt)("p",null,"En el caso de objetos, podemos ver f\xe1cilmente cuando un objeto o clase tiene dos m\xe9todos que apuntan a resolver, cada uno, tareas diferentes. Podr\xedamos incluso pensarlo a nivel de cada m\xe9todo, analizando cu\xe1ntas tareas resuelve."),(0,s.kt)("h2",{id:"facilidad-de-prueba-o-testeabilidad"},"Facilidad de prueba (o ",(0,s.kt)("em",{parentName:"h2"},"testeabilidad"),")"),(0,s.kt)("p",null,"La testeabilidad de un sistema nos permite asegurar que el c\xf3digo funciona correctamente y es mantenible. Verificar la testeabilidad de componentes peque\xf1os, ayudar\xe1 a mejorar el sistema en general."),(0,s.kt)("h2",{id:"abstracci\xf3n"},"Abstracci\xf3n"),(0,s.kt)("p",null,"Podemos pensar a la idea de abstracci\xf3n en, al menos, dos ejes: su calidad y su cantidad."),(0,s.kt)("p",null,"Por un lado, deber\xedamos apuntar a construir buenas abstracciones que definan met\xe1foras consistentes y que encajen con nuestros modelos mentales sobre la realidad. Dicho informalmente, que la abstracci\xf3n \u201ccierre\u201d, no \u201cnos genere ruido\u201d."),(0,s.kt)("p",null,"Cuando tenemos mejores abstracciones estamos maximizando dos cualidades de dise\xf1o m\xe1s:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Reusabilidad"),": posibilidad de utilizar un m\xf3dulo/componente construido anteriormente para resolver un problema nuevo."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Genericidad"),": poder utilizar un m\xf3dulo/componente definido anteriormente que se puede aplicar para resolver problemas distintos.")),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Ejemplo")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Una estructura de datos fundamental es la Pila, la cual es muy poderosa por su simplicidad, pero tambi\xe9n por su proximidad al mundo real: un contenedor en el cual coloco y saco elementos por arriba, como en los portamonedas con resorte (qu\xe9 antig\xfcedad...)."),(0,s.kt)("p",{parentName:"div"},"Sus dos operaciones fundamentales son ",(0,s.kt)("em",{parentName:"p"},"apilar")," y ",(0,s.kt)("em",{parentName:"p"},"desapilar"),". \xbfQu\xe9 pasar\xeda si model\xe1ramos una pila con un objeto, que entienda los mensajes ",(0,s.kt)("inlineCode",{parentName:"p"},"apilar(elemento)")," y ",(0,s.kt)("inlineCode",{parentName:"p"},"desapilar()"),", pero adem\xe1s le pusieramos el m\xe9todo ",(0,s.kt)("inlineCode",{parentName:"p"},"insertar(posicion, elemento)"),"?"),(0,s.kt)("p",{parentName:"div"},"Nuestra abstracci\xf3n dejar\xeda de \u201ccerrar\u201d, no porque haya perdido cohesi\xf3n (",(0,s.kt)("inlineCode",{parentName:"p"},"apilar")," e ",(0,s.kt)("inlineCode",{parentName:"p"},"insertar")," son dos m\xe9todos orientados a lo mismo: agregar elementos al contenedor) sino porque la operaci\xf3n de inserci\xf3n en un una posici\xf3n arbitraria deja de encajar con la idea de una pila."))),(0,s.kt)("p",null,"Por otro lado, podemos ver la cualidad de abstracci\xf3n seg\xfan cu\xe1ntas de las abstracciones presentes en el modelo de negocio tambi\xe9n est\xe1n presentes en nuestra soluci\xf3n. Lo que vamos a buscar es que todas las abstracciones fundamentales del negocio que estamos modelando est\xe9n presentes, es decir, no perder abstracciones en el camino del dise\xf1o y construcci\xf3n del sistema."),(0,s.kt)("p",null,"Ac\xe1 estamos entrando en una aparente contradicci\xf3n con la cualidad de simplicidad: parecer\xeda que por un lado planteamos maximizar la cantidad de abstracciones, y por el otro, minimizarla. La clave est\xe1 en identificar cuales son abstracciones fundamentales para el dise\xf1o de la soluci\xf3n, y cuales son prescindibles (complejidades accidentales). Idea que queda resumida en el principio de ",(0,s.kt)("em",{parentName:"p"},'"Make things as simple as possible, but not simpler"'),' ("haz las cosas tan simple como sea posible, pero no m\xe1s simple").'),(0,s.kt)("h2",{id:"consistencia"},"Consistencia"),(0,s.kt)("p",null,"Un dise\xf1o es consistente cuando ante problemas de dise\xf1o similares, se tomaron decisiones de dise\xf1o similares. Se trata de aplicar los mismos criterios uniformemente a lo largo del dise\xf1o, haci\xe9ndolo m\xe1s predecible para alguien que ocasionalmente mire nuestro c\xf3digo y facilitando su comprensi\xf3n."),(0,s.kt)("h2",{id:"redundancia-m\xednima"},"Redundancia m\xednima"),(0,s.kt)("p",null,"Un dise\xf1o presenta redundancia cuando el mismo conocimiento est\xe1 presente en m\xfaltiples lugares, ya sea porque contempla m\xfaltiples mecanismos orientados a realizar la misma tarea, o porque la informaci\xf3n que el sistema mantiene se encuentra directa o indirectamente duplicada."),(0,s.kt)("p",null,"La ",(0,s.kt)("strong",{parentName:"p"},"repetici\xf3n de l\xf3gica"),", provoca que cambiar el comportamiento del sistema sea m\xe1s dif\xedcil, cometer errores sea m\xe1s f\xe1cil y rastrearlos, m\xe1s dif\xedcil. Al principio de no repetir l\xf3gica se lo suele conocer como ",(0,s.kt)("em",{parentName:"p"},"DRY: don't repeat yourself")," (no te repitas a vos mismo/a)."),(0,s.kt)("p",null,"La ",(0,s.kt)("strong",{parentName:"p"},"repetici\xf3n de informaci\xf3n")," abre la puerta a la introducci\xf3n de inconsistencias en los datos. Al proceso que busca reducir esta redundancia se lo suele conocer como ",(0,s.kt)("em",{parentName:"p"},"normalizaci\xf3n"),"."),(0,s.kt)("p",null,"Puesto en otros t\xe9rminos, no ser\xe1 suficiente con crear buenas abstracciones y usarlas de forma consistente siempre que corresponda, sino adem\xe1s, deberemos evitar el solapamiento entre las mismas: el conocimiento debe estar en un solo lugar."),(0,s.kt)("h2",{id:"mutaciones-controladas"},"Mutaciones controladas"),(0,s.kt)("p",null,"Cuanto menos cambio de estado presentan mis componentes mientras el sistema se encuentra en funcionamiento, m\xe1s f\xe1cil resulta razonar sobre el mismo: podemos compartir, descartar o reemplazar a los componentes m\xe1s f\xe1cilmente, y en general, minimizamos la probabilidad de cometer errores."),(0,s.kt)("p",null,"Por eso, un dise\xf1o que tiene m\xe1s control sobre las mutaciones (es decir, las circunscribe y emplea solo cuando son necesarias) es mejor que aquel que no lo hace."),(0,s.kt)("p",null,"Algunos principios derivados de esta idea general son:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Favorecer la inmutabilidad:")," dise\xf1ar los componentes del sistema de forma tal que sean inmutables, libres de cualquier tipo de cambio de estado interno. Si bien no es posible dise\xf1ar un sistema completamente libre de mutaciones, s\xed es posible y valioso dise\xf1ar partes del mismo que lo sean."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Minimizar la mutabilidad:")," a\xfan si mis componentes son mutables, realizar las mutaciones solo cuando realmente es necesario, y no exponer en sus interfaces operaciones mutables que los requerimientos no justifiquen.")))}m.isMDXComponent=!0}}]);
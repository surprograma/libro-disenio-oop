"use strict";(self.webpackChunklibro_disenio_oop=self.webpackChunklibro_disenio_oop||[]).push([[7287],{3905:function(e,a,t){t.d(a,{Zo:function(){return u},kt:function(){return m}});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=n.createContext({}),c=function(e){var a=n.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},u=function(e){var a=c(e.components);return n.createElement(l.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},d=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(t),m=r,b=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return t?n.createElement(b,s(s({ref:a},u),{},{components:t})):n.createElement(b,s({ref:a},u))}));function m(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=d;var i={};for(var l in a)hasOwnProperty.call(a,l)&&(i[l]=a[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=t[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8215:function(e,a,t){var n=t(7294);a.Z=function(e){var a=e.children,t=e.hidden,r=e.className;return n.createElement("div",{role:"tabpanel",hidden:t,className:r},a)}},5064:function(e,a,t){t.d(a,{Z:function(){return p}});var n=t(7294),r=t(9443);var o=function(){var e=(0,n.useContext)(r.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},s=t(6010),i="tabItem_1uMI",l="tabItemActive_2DSg";var c=37,u=39;var p=function(e){var a=e.lazy,t=e.block,r=e.defaultValue,p=e.values,d=e.groupId,m=e.className,b=o(),k=b.tabGroupChoices,g=b.setTabGroupChoices,f=(0,n.useState)(r),v=f[0],N=f[1],h=n.Children.toArray(e.children),y=[];if(null!=d){var q=k[d];null!=q&&q!==v&&p.some((function(e){return e.value===q}))&&N(q)}var C=function(e){var a=e.currentTarget,t=y.indexOf(a),n=p[t].value;N(n),null!=d&&(g(d,n),setTimeout((function(){var e,t,n,r,o,s,i,c;(e=a.getBoundingClientRect(),t=e.top,n=e.left,r=e.bottom,o=e.right,s=window,i=s.innerHeight,c=s.innerWidth,t>=0&&o<=c&&r<=i&&n>=0)||(a.scrollIntoView({block:"center",behavior:"smooth"}),a.classList.add(l),setTimeout((function(){return a.classList.remove(l)}),2e3))}),150))},x=function(e){var a,t;switch(e.keyCode){case u:var n=y.indexOf(e.target)+1;t=y[n]||y[0];break;case c:var r=y.indexOf(e.target)-1;t=y[r]||y[y.length-1]}null==(a=t)||a.focus()};return n.createElement("div",{className:"tabs-container"},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":t},m)},p.map((function(e){var a=e.value,t=e.label;return n.createElement("li",{role:"tab",tabIndex:v===a?0:-1,"aria-selected":v===a,className:(0,s.Z)("tabs__item",i,{"tabs__item--active":v===a}),key:a,ref:function(e){return y.push(e)},onKeyDown:x,onFocus:C,onClick:C},t)}))),a?(0,n.cloneElement)(h.filter((function(e){return e.props.value===v}))[0],{className:"margin-vert--md"}):n.createElement("div",{className:"margin-vert--md"},h.map((function(e,a){return(0,n.cloneElement)(e,{key:a,hidden:e.props.value!==v})}))))}},9443:function(e,a,t){var n=(0,t(7294).createContext)(void 0);a.Z=n},4416:function(e,a,t){t.r(a),t.d(a,{frontMatter:function(){return c},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return d},Codigo:function(){return m},KotlinTypescript:function(){return b},default:function(){return g}});var n=t(2122),r=t(9756),o=(t(7294),t(3905)),s=t(5064),i=t(8215),l=["components"],c={sidebar_position:1,title:"\xbfC\xf3mo elaborar casos de prueba?",description:"Gu\xeda pr\xe1ctica de c\xf3mo elaborar los escenarios para escribir pruebas automatizadas."},u=void 0,p={unversionedId:"pruebas-automatizadas/elaborar-casos-prueba",id:"pruebas-automatizadas/elaborar-casos-prueba",isDocsHomePage:!1,title:"\xbfC\xf3mo elaborar casos de prueba?",description:"Gu\xeda pr\xe1ctica de c\xf3mo elaborar los escenarios para escribir pruebas automatizadas.",source:"@site/docs/pruebas-automatizadas/elaborar-casos-prueba.mdx",sourceDirName:"pruebas-automatizadas",slug:"/pruebas-automatizadas/elaborar-casos-prueba",permalink:"/libro-disenio-oop/docs/pruebas-automatizadas/elaborar-casos-prueba",editUrl:"https://github.com/surprograma/libro-disenio-oop/edit/main/docs/pruebas-automatizadas/elaborar-casos-prueba.mdx",version:"current",lastUpdatedBy:"Federico Aloi",lastUpdatedAt:1629379546,formattedLastUpdatedAt:"8/19/2021",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"\xbfC\xf3mo elaborar casos de prueba?",description:"Gu\xeda pr\xe1ctica de c\xf3mo elaborar los escenarios para escribir pruebas automatizadas."},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udc4b Introducci\xf3n",permalink:"/libro-disenio-oop/docs/intro"},next:{title:"Desarrollo guiado por pruebas (TDD)",permalink:"/libro-disenio-oop/docs/pruebas-automatizadas/desarrollo-guiado-pruebas"}},d=[{value:"Descripci\xf3n del dominio",id:"descripci\xf3n-del-dominio",children:[]},{value:"Definiendo los escenarios",id:"definiendo-los-escenarios",children:[]},{value:"Escribiendo los tests",id:"escribiendo-los-tests",children:[{value:"\xbfC\xf3mo agrupar los escenarios?",id:"\xbfc\xf3mo-agrupar-los-escenarios",children:[]},{value:"Expresividad: nombres acorde a lo que representan",id:"expresividad-nombres-acorde-a-lo-que-representan",children:[]}]},{value:"Buenas pr\xe1cticas",id:"buenas-pr\xe1cticas",children:[{value:"El patr\xf3n AAA: Arrange-Act-Assert",id:"el-patr\xf3n-aaa-arrange-act-assert",children:[]}]}],m=function(e){return e.children},b=function(e){var a=e.children;e.color;return(0,o.kt)(s.Z,{groupId:"lenguaje-oop",defaultValue:"kt",values:[{label:"Kotlin",value:"kt"},{label:"TypeScript",value:"ts"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"kt",mdxType:"TabItem"},a[0]),(0,o.kt)(i.Z,{value:"ts",mdxType:"TabItem"},a[1]))},k={toc:d,Codigo:m,KotlinTypescript:b};function g(e){var a=e.components,s=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,n.Z)({},k,s,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Este art\xedculo es una adaptaci\xf3n de ",(0,o.kt)("a",{parentName:"p",href:"http://wiki.uqbar.org/wiki/articles/testeo-unitario-avanzado.html"},"Testeo unitario avanzado"),", elaborado por Fernando Dodino para la ",(0,o.kt)("a",{parentName:"p",href:"https://www.uqbar.org/#/"},"Fundaci\xf3n Uqbar"),".")),(0,o.kt)("p",null,"Este art\xedculo presenta algunas gu\xedas para desarrollar los casos de prueba, asumiendo que ya conoc\xe9s el concepto de pruebas automatizadas y alg\xfan framework para implementarlas."),(0,o.kt)("h2",{id:"descripci\xf3n-del-dominio"},"Descripci\xf3n del dominio"),(0,o.kt)("p",null,"Todo el apunte estar\xe1 elaborado en base al siguiente dominio:"),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"requerimiento")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Una ferreter\xeda tiene en cuenta ciertos aspectos para decidir si le puede fiar a un cliente o no."),(0,o.kt)("ul",{parentName:"div"},(0,o.kt)("li",{parentName:"ul"},"Al cliente particular le fia solo si no adeuda nada, es decir si su deuda es de $0."),(0,o.kt)("li",{parentName:"ul"},"A las constructoras les fia dependiendo de cu\xe1ntos alba\xf1iles trabajen en la obra:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"si son 5 o m\xe1s alba\xf1iles, le f\xeda hasta $10.000,"),(0,o.kt)("li",{parentName:"ul"},"de lo contrario s\xf3lo hasta $5.000.")))))),(0,o.kt)("h2",{id:"definiendo-los-escenarios"},"Definiendo los escenarios"),(0,o.kt)("p",null,"Para armar los escenarios de prueba, vamos a tomar prestado un concepto de la matem\xe1tica llamado ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://es.wikipedia.org/wiki/Clase_de_equivalencia"},"clase de equivalencia")),". Clasificar a los distintos escenarios seg\xfan las caracter\xedsticas que comparten nos va a permitir contemplar todas las opciones posibles sin tener que escribir infinitas pruebas."),(0,o.kt)("p",null,"Para un ",(0,o.kt)("strong",{parentName:"p"},"cliente particular")," tenemos dos casos: que deba algo o que no deba nada. Si debe $1 \xf3 $50.000 no nos importa, porque est\xe1 en la misma clase de equivalencia (la deuda es mayor a $0)."),(0,o.kt)("p",null,"Para una ",(0,o.kt)("strong",{parentName:"p"},"empresa constructora"),", tenemos m\xe1s variantes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"si tiene ",(0,o.kt)("strong",{parentName:"li"},"menos de 5")," alba\xf1iles, podemos decir que son ",(0,o.kt)("inlineCode",{parentName:"li"},'"pocos"')," alba\xf1iles,"),(0,o.kt)("li",{parentName:"ul"},"si tiene ",(0,o.kt)("strong",{parentName:"li"},"5 o m\xe1s")," alba\xf1iles, podemos decir que son ",(0,o.kt)("inlineCode",{parentName:"li"},'"muchos"')," alba\xf1iles.")),(0,o.kt)("p",null,"Combinando eso con las posibles deudas, podr\xedamos definir los siguientes escenarios:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Dado un cliente particular:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Si debe algo:")," no se le puede fiar."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Si no debe nada:")," se le puede fiar."))),(0,o.kt)("li",{parentName:"ul"},"Dada una constructora con muchos (5) alba\xf1iles:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Si la obra debe m\xe1s de $10.000:")," no se le puede fiar."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Si la obra debe menos de $10.000:")," se le puede fiar."))),(0,o.kt)("li",{parentName:"ul"},"Dada una constructora con pocos (4) alba\xf1iles:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Si la obra debe m\xe1s de $5.000:")," no se le puede fiar."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Si la obra debe menos de $5.000:")," se le puede fiar.")))),(0,o.kt)("p",null,"En el caso de la constructora, elegimos la cantidad de obreros en base al ",(0,o.kt)("strong",{parentName:"p"},"valor l\xedmite"),": como 5 es el n\xfamero que distingue entre ",(0,o.kt)("em",{parentName:"p"},"pocos")," y ",(0,o.kt)("em",{parentName:"p"},"muchos"),", elegimos 4 para representar al caso ",(0,o.kt)("em",{parentName:"p"},"pocos")," y 5 para el caso ",(0,o.kt)("em",{parentName:"p"},"muchos"),"."),(0,o.kt)("p",null,"Sin dudas podr\xedamos haber elegido otros n\xfameros, pero es importante que los tests sean simples y f\xe1ciles de comprender. Por esta raz\xf3n, vamos a preferir siempre utilizar valores que nos resulten f\xe1ciles de razonar para representar a cada escenario."),(0,o.kt)("h2",{id:"escribiendo-los-tests"},"Escribiendo los tests"),(0,o.kt)("p",null,"Necesitamos:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Un cliente particular."),(0,o.kt)("li",{parentName:"ul"},"Una empresa constructora con 6 alba\xf1iles."),(0,o.kt)("li",{parentName:"ul"},"Otra empresa constructora con 5 alba\xf1iles.")),(0,o.kt)("p",null,"A los que podemos configurar diferentes grados de deuda."),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Atenci\xf3n")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Los ejemplos de c\xf3digo que vienen a continuaci\xf3n asumen que se utiliza Kotest (en el caso de Kotlin) o Jest (en el caso de Typescript). La agrupaci\xf3n que proponemos no puede imitarse f\xe1cilmente en frameworks como JUnit."))),(0,o.kt)("h3",{id:"\xbfc\xf3mo-agrupar-los-escenarios"},"\xbfC\xf3mo agrupar los escenarios?"),(0,o.kt)("p",null,"En frameworks como ",(0,o.kt)("a",{parentName:"p",href:"https://jestjs.io/"},"Jest")," o ",(0,o.kt)("a",{parentName:"p",href:"https://kotest.io/"},"Kotest")," tenemos la posibilidad de jerarquizar nuestras pruebas, utilizando las funciones ",(0,o.kt)("inlineCode",{parentName:"p"},"describe")," e ",(0,o.kt)("inlineCode",{parentName:"p"},"it")," para crear estas agrupaciones."),(0,o.kt)("p",null,"Podr\xedamos tambi\xe9n tener todo junto, sin ning\xfan tipo de agrupamiento. Pero esto no resulta ser una buena pr\xe1ctica, porque"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"dificulta diferenciar los escenarios: estar\xe1n todas las variables de los tests mezcladas,"),(0,o.kt)("li",{parentName:"ul"},"si construimos un fixture con cada uno de los tipos de cliente, estamos penalizando a cada uno de los tests por lo que necesitan los dem\xe1s: \xbftiene sentido crear una constructora con 5 alba\xf1iles si estoy testeando una que tiene 6?,"),(0,o.kt)("li",{parentName:"ul"},"se pierde ",(0,o.kt)("strong",{parentName:"li"},"cohesi\xf3n"),": un solo m\xe9todo (o funci\xf3n, en este caso) est\xe1 cubriendo todos los casos de prueba.")),(0,o.kt)("p",null,"Volviendo al ejemplo, hay varias opciones posibles:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"hacer un ",(0,o.kt)("inlineCode",{parentName:"li"},"describe")," para clientes particulares y otro para constructoras,"),(0,o.kt)("li",{parentName:"ul"},"hacer un ",(0,o.kt)("inlineCode",{parentName:"li"},"describe")," para clientes particulares, otro para constructoras con pocos alba\xf1iles y otro para constructoras con muchos alba\xf1iles.")),(0,o.kt)("p",null,"Elegiremos la ultima opci\xf3n y agruparemos las pruebas de la siguiente forma:"),(0,o.kt)(b,{mdxType:"KotlinTypescript"},(0,o.kt)(m,{mdxType:"Codigo"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'describe("Un cliente particular") {\n  // ...\n}\n\ndescribe("Una constructora con pocos alba\xf1iles") {\n  // ...\n}\n\ndescribe("Una constructora con muchos alba\xf1iles") {\n  // ...\n}\n'))),(0,o.kt)(m,{mdxType:"Codigo"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"describe('Un cliente particular', () => {\n  // ...\n});\n\ndescribe('Una constructora con pocos alba\xf1iles', () => {\n  // ...\n});\n\ndescribe('Una constructora con muchos alba\xf1iles', () => {\n  // ...\n});\n")))),(0,o.kt)("p",null,"Es importante que no haya demasiados detalles de implementaci\xf3n en los nombres: ",(0,o.kt)("inlineCode",{parentName:"p"},"Una constructora con 5 alba\xf1iles")," o ",(0,o.kt)("inlineCode",{parentName:"p"},"Una constructora con 10 alba\xf1iles")," est\xe1n sujetos a que cualquier cambio del negocio respecto a lo que son \u201cmuchos\u201d o \u201cpocos\u201d alba\xf1iles necesite modificar el nombre del test. Adem\xe1s, un nombre as\xed nos obliga a ir a revisar el c\xf3digo (o el requerimiento, si es que est\xe1 escrito en alg\xfan lado) para comprender que se trata de dos escenarios diferentes."),(0,o.kt)("h3",{id:"expresividad-nombres-acorde-a-lo-que-representan"},"Expresividad: nombres acorde a lo que representan"),(0,o.kt)("p",null,"Al empezar a dise\xf1ar los casos de prueba es usual imaginar alg\xfan ejemplo m\xe1s o menos realista, como ",(0,o.kt)("inlineCode",{parentName:"p"},"La Constructora Hurlingham tiene 5 alba\xf1iles y una deuda de 7000 pesos"),"."),(0,o.kt)("p",null,"Intentando traducir esto a c\xf3digo, tal vez nos saldr\xeda un tests como el siguiente:"),(0,o.kt)(b,{mdxType:"KotlinTypescript"},(0,o.kt)(m,{mdxType:"Codigo"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'class FerreteriaTest : DescribeSpec({\n  describe("Una ferreter\xeda") {\n    it("puede fiarle a la Constructora Hurlingham") {\n      val constructoraHurlingham = EmpresaConstructora(albaniles = 5, deuda = 7000)\n      constructoraHurlingham.puedePedirFiado().shouldBeTrue()\n    }\n  }\n})\n'))),(0,o.kt)(m,{mdxType:"Codigo"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"describe('Una ferreter\xeda', () => {\n  it('puede fiarle a la Constructora Hurlingham', () => {\n    const constructoraHurlingham = new EmpresaConstructora(5, 7000);\n    expect(constructoraHurlingham.puedePedirFiado()).toBeTruthy();\n  });\n});\n")))),(0,o.kt)("p",null,"Pero \xbfqu\xe9 pasa si hay un error en el c\xf3digo y el test falla? Supongamos esta implementaci\xf3n, donde la clase ",(0,o.kt)("inlineCode",{parentName:"p"},"EmpresaConstructora")," tiene la definici\xf3n de la deuda como un entero:"),(0,o.kt)(b,{mdxType:"KotlinTypescript"},(0,o.kt)(m,{mdxType:"Codigo"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"class EmpresaConstructora(val cantidadAlbaniles: Int, deuda: Int): Cliente(deuda) {\n    // Deber\xeda ser >= 5\n    fun montoMaximoDeuda() = if (cantidadAlbaniles > 5) 10000 else 5000\n\n    override fun puedePedirFiado() = deuda <= this.montoMaximoDeuda()\n}\n"))),(0,o.kt)(m,{mdxType:"Codigo"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"class EmpresaConstructora extends Cliente {\n  constructor(public cantidadAlbaniles: number, deuda: number) {\n    super(deuda);\n  }\n\n  montoMaximoDeuda(): number {\n    // Deber\xeda ser >= 5\n    return this.cantidadAlbaniles > 5 ? 10000 : 5000;\n  }\n\n  puedePedirFiado(): boolean {\n    return this.deuda <= this.montoMaximoDeuda();\n  }\n}\n")))),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Caso triste",src:t(3202).Z})),(0,o.kt)("p",null,"Cuando ejecutamos el test tenemos muy poca informaci\xf3n relevante:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"la constante ",(0,o.kt)("inlineCode",{parentName:"li"},"constructorHurlingham")," no est\xe1 revelando que es una constructora con muchos alba\xf1iles,"),(0,o.kt)("li",{parentName:"ul"},"y tampoco est\xe1 claro por qu\xe9 no puede pedir fiado.")),(0,o.kt)("p",null,"Al fallar, tenemos que bucear en el c\xf3digo y extraer este dato para determinar si el error est\xe1 en el test o en el c\xf3digo de negocio."),(0,o.kt)("h4",{id:"otra-oportunidad"},"Otra oportunidad"),(0,o.kt)("p",null,"Vamos a mejorar la sem\xe1ntica del test, renombrando la constante ",(0,o.kt)("inlineCode",{parentName:"p"},"constructoraHurlingham")," por un nombre m\xe1s representativo de la clase de equivalencia que estamos modelando y cambiando el nombre del test:"),(0,o.kt)(b,{mdxType:"KotlinTypescript"},(0,o.kt)(m,{mdxType:"Codigo"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'class FerreteriaTest : DescribeSpec({\n  describe("Una ferreter\xeda") {\n    it("puede fiarle a una constructora con muchos alba\xf1iles") {\n      val constructoraMuchosAlbaniles = EmpresaConstructora(albaniles = 5, deuda = 7000)\n      constructoraMuchosAlbaniles.puedePedirFiado().shouldBeTrue()\n    }\n  }\n})\n'))),(0,o.kt)(m,{mdxType:"Codigo"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"describe('Una ferreter\xeda', () => {\n  it('puede fiarle a una constructora con muchos alba\xf1iles', () => {\n    const constructoraMuchosAlbaniles = new EmpresaConstructora(5, 7000);\n    expect(constructoraMuchosAlbaniles.puedePedirFiado()).toBeTruthy();\n  });\n});\n")))),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Caso feliz",src:t(5039).Z})),(0,o.kt)("p",null,"Ahora al fallar el test sabemos m\xe1s cosas:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"qu\xe9 es lo que estamos testeando, tratando de no entrar en detalles para no duplicar lo que dice el c\xf3digo,"),(0,o.kt)("li",{parentName:"ul"},"qu\xe9 se esperaba que pasara y no pas\xf3, en un formato ",(0,o.kt)("em",{parentName:"li"},"m\xe1s o menos")," legible para un usuario: \u201cUna ferreter\xeda puede fiarle a una constructora con muchos alba\xf1iles\u201d.")),(0,o.kt)("h2",{id:"buenas-pr\xe1cticas"},"Buenas pr\xe1cticas"),(0,o.kt)("p",null,"M\xe1s all\xe1 de lo explicado hasta aqu\xed, compartimos tambi\xe9n algunas buenas pr\xe1cticas que pueden ser \xfatiles a la hora de armar nuestras pruebas."),(0,o.kt)("h3",{id:"el-patr\xf3n-aaa-arrange-act-assert"},"El patr\xf3n AAA: Arrange-Act-Assert"),(0,o.kt)("p",null,"Una de las formas m\xe1s comunes de estructurar las pruebas es utilizando el patr\xf3n AAA: ",(0,o.kt)("em",{parentName:"p"},"Arrange"),", ",(0,o.kt)("em",{parentName:"p"},"Act")," y ",(0,o.kt)("em",{parentName:"p"},"Assert"),"."),(0,o.kt)("p",null,"No es necesario cumplirlo a rajatabla - y de hecho el ejemplo de este apunte no lo cumple \ud83d\ude05 -, pero tenerlo en mente puede ayudarnos a entender si nuestro test tiene todo lo que deber\xeda tener."),(0,o.kt)("p",null,'Seg\xfan este patr\xf3n, cada test se puede dividir en tres "momentos":'),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Arrange"),": que podr\xeda traducirse como ",(0,o.kt)("em",{parentName:"li"},"arreglar")," o ",(0,o.kt)("em",{parentName:"li"},"gestionar"),", en donde se instancian los objetos a testear, en este ejemplo la ferreteria y sus clientes. Cuando estos objetos son compartidos entre varios tests, los frameworks nos permiten ubicarlos en alg\xfan lugar com\xfan, por ejemplo dentro de un mismo ",(0,o.kt)("inlineCode",{parentName:"li"},"describe"),". La desventaja de esta t\xe9cnica es que para tener una idea general de los elementos que participan en el test debemos mirar el test ",(0,o.kt)("strong",{parentName:"li"},"y adem\xe1s")," el c\xf3digo de inicializaci\xf3n en el que est\xe1 enmarcado."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Act"),": que podr\xeda traducirse como ",(0,o.kt)("em",{parentName:"li"},"actuar"),". Son operaciones que tienen alg\xfan efecto sobre los objetos creados, y que posteriormente vamos a querer comprobar que hicieron lo que deb\xedan. Hay tests, como los de este apunte, que no necesitan disparar acciones, y est\xe1 bien que eso ocurra."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Assert"),": que podr\xeda traducirse como ",(0,o.kt)("em",{parentName:"li"},"afirmar"),". Es la parte donde escribimos lo que esperamos que pase, generalmente asociado a las respuestas que da el env\xedo de un mensaje al objeto testeado.")),(0,o.kt)("p",null,"Veamos un ejemplo sencillo que puede desglosarse f\xe1cilmente en esos tres componentes:"),(0,o.kt)(b,{mdxType:"KotlinTypescript"},(0,o.kt)(m,{mdxType:"Codigo"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'describe("Un ave") {\n  it("pierde energ\xeda al volar") {\n    // ARRANGE: se crea el objeto\n    val pepita = Ave(1000)\n\n    // ACT: se realizan las acciones\n    pepita.volar()\n\n    // ASSERT: se verifica el efecto\n    pepita.energia.shouldBe(900)\n  }\n}\n'))),(0,o.kt)(m,{mdxType:"Codigo"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"describe('Un ave', () => {\n  it('pierde energ\xeda al volar', () => {\n    // ARRANGE: se crea el objeto\n    const pepita = new Ave(1000);\n\n    // ACT: se realizan las acciones\n    pepita.volar();\n\n    // ASSERT: se verifica el efecto\n    expect(pepita.energia).toBe(900);\n  });\n});\n")))))}g.isMDXComponent=!0},6010:function(e,a,t){function n(e){var a,t,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(a=0;a<e.length;a++)e[a]&&(t=n(e[a]))&&(r&&(r+=" "),r+=t);else for(a in e)e[a]&&(r&&(r+=" "),r+=a);return r}function r(){for(var e,a,t=0,r="";t<arguments.length;)(e=arguments[t++])&&(a=n(e))&&(r&&(r+=" "),r+=a);return r}t.d(a,{Z:function(){return r}})},5039:function(e,a,t){a.Z=t.p+"assets/images/test-expresivo-5339a77d912f9d8375ab049afd28d05b.png"},3202:function(e,a,t){a.Z=t.p+"assets/images/test-poco-expresivo-0c416f2178a83ba60413dbdd60b40530.png"}}]);